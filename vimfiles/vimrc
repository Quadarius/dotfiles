if &compatible
	set nocompatible
endif

let g:python3_host_prog='C:\Users\qmoore\AppData\Local\Programs\Python\Python37-32\python.exe'
let g:python_host_prog='C:\Python27\python.exe'
let $SHA='C:\www\docs\sha\wp-content\themes\sha-theme'
let $FZF_DEFAULT_COMMAND='rg --files -g "!{.git,node_modules,AppData,dotfiles}/*"'

filetype plugin indent on
syntax enable

call plug#begin()

	"Plug 'Shougo/dein.vim'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'morhetz/gruvbox'

	Plug 'nathanaelkane/vim-indent-guides'
	Plug 'airblade/vim-gitgutter'
	Plug 'othree/html5.vim'
	Plug 'mattn/emmet-vim'

	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-repeat'

	" FZF
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'junegunn/fzf.vim'

	" CLOJURE {{{
	Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
	Plug 'guns/vim-clojure-static'
	Plug 'guns/vim-clojure-highlight'
	Plug 'guns/vim-slamhound'
	"Plug 'venantius/vim-cljfmt'
	" }}}

	" LINTING
	Plug 'w0rp/ale'
	Plug 'OrangeT/vim-csharp'
	
	Plug 'leafgarland/typescript-vim'
	Plug 'Quramy/tsuquyomi'
	Plug 'Shougo/vimproc.vim', {'do' : 'make'}
	Plug 'scrooloose/nerdtree'
	Plug 'OmniSharp/omnisharp-vim'
	Plug 'dhruvasagar/vim-table-mode'

	if has('nvim')
		Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	else
		Plug 'Shougo/deoplete.nvim'
		Plug 'roxma/nvim-yarp'
		Plug 'roxma/vim-hug-neovim-rpc'
	endif

call plug#end()

colorscheme gruvbox
set background=dark
set number
set backspace=indent,eol,start
set guifont=Source_Code_Variable:h11
set cursorline
set nowrap
set encoding=utf-8
set list
set lcs=eol:¬,trail:□,space:·,tab:--

set tabstop=2
set softtabstop=2
set shiftwidth=2
"set noexpandtab
"
set ruler
set showcmd
set ignorecase
set nocompatible
set hidden
set showtabline=0

inoremap jk <esc>
let mapleader = " "

" open fuzzy finder
nnoremap \ :Files<CR>

" Switch buffers with Tab
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <C-x> :bdelete<CR>

" Map : to ;
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Open new line below and above current line
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" Save
"inoremap <C-s>     <C-O>:update<cr>
nnoremap <C-s>     :update<cr>
nnoremap <leader>s :update<cr>
nnoremap <leader>w :update<cr>

" Quit
inoremap <C-Q>     <esc>:q<cr>
nnoremap <C-Q>     :q<cr>
vnoremap <C-Q>     <esc>
nnoremap <Leader>q :q<cr>
nnoremap <Leader>Q :qa!<cr>

" Split Navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

let g:deoplete#enable_at_startup = 1

"let g:airline#extensions#tabline#enabled = 1

let g:indent_guides_enable_on_vim_startup = 1

if has('nvim')
	cd ~
	set lines=40 columns=140
endif

if has('gui_running')
	set lines=40 columns=140
	autocmd GUIEnter * set vb t_vb=

	" no toobars or menus on gvim
	set guioptions -=m
	set guioptions -=T
	set guioptions -=r
	set guioptions -=L
endif


" use system clipboard
set clipboard=unnamed
" hybrid numbers
set number relativenumber

" -----------------------------------------------------------------------------
" AUTOCOMMANDS
" -----------------------------------------------------------------------------
augroup myvimrc
	au!
	au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
augroup END

autocmd FileType help noremap <buffer> q :q<cr>
autocmd FileType typescript setlocal sw=2 sts=2 expandtab

"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists(“s:std_in”) | NERDTree | endif

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" -----------------------------------------------------------------------------
" PLUGIN MAPPINGS
" -----------------------------------------------------------------------------

nnoremap <leader>b :Buffers<cr>
"nnoremap <C-O> :NERDTreeToggle<CR>
nnoremap <Leader>f :NERDTreeToggle<Enter>
