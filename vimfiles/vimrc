if &compatible
	set nocompatible
endif

let g:python3_host_prog='C:\Users\qmoore\AppData\Local\Programs\Python\Python37-32\python.exe'
let $SHA='C:\www\docs\sha\wp-content\themes\sha-theme'

filetype plugin indent on
syntax enable

call plug#begin()

	Plug 'Shougo/dein.vim'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'morhetz/gruvbox'
	Plug 'justinmk/vim-dirvish'
	Plug 'nathanaelkane/vim-indent-guides'
	Plug 'w0rp/ale'
	Plug 'airblade/vim-gitgutter'
	Plug 'othree/html5.vim'
	Plug 'kristijanhusak/deoplete-phpactor'
	Plug 'mattn/emmet-vim'
	Plug 'Shougo/denite.nvim'

	if has('nvim')
		Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	else
		Plug 'Shougo/deoplete.nvim'
		Plug 'roxma/nvim-yarp'
		Plug 'roxma/vim-hug-neovim-rpc'
	endif

	if executable('composer')
		Plug 'phpactor/phpactor', {
				\ 'do': 'composer install',
				\ 'for': 'php',
				\ 'dir': $HOME . '/.phpactor',
				\ }
	endif
call plug#end()

colorscheme gruvbox
set background=dark
set number
set guifont=Source_Code_Variable:h11
set cursorline
set nowrap
set encoding=utf-8
set list
set lcs=eol:¬,trail:□,space:·,tab:--
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set ruler
set showcmd

inoremap jk <esc>
let mapleader = " "

nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
nnoremap <C-X> :bdelete<CR>

let g:deoplete#enable_at_startup = 1

let g:airline#extensions#tabline#enabled = 1

let g:indent_guides_enable_on_vim_startup = 1

" Include use statement
nmap <Leader>u :call phpactor#UseAdd()<CR>

" Invoke the context menu
nmap <Leader>mm :call phpactor#ContextMenu()<CR>

" Invoke the navigation menu
nmap <Leader>nn :call phpactor#Navigate()<CR>

" Goto definition of class or class member under the cursor
nmap <Leader>o :call phpactor#GotoDefinition()<CR>

" Transform the classes in the current file
nmap <Leader>tt :call phpactor#Transform()<CR>

" Generate a new class (replacing the current file)
nmap <Leader>cc :call phpactor#ClassNew()<CR>

" Extract expression (normal mode)
nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>

" Extract expression from selection
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>

" Extract method from selection
vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>

if has('nvim')
	cd ~
	set lines=40 columns=140
endif


if has('gui_running')
	set lines=40 columns=140
	autocmd GUIEnter * set vb t_vb=

	" no toobars or menus on gvim
	set guioptions -=m
	set guioptions -=T
	set guioptions -=r
	set guioptions -=L
endif


" -----------------------------------------------------------------------------
" AUTOCOMMANDS
" -----------------------------------------------------------------------------
augroup myvimrc
	au!
	au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
augroup END

autocmd FileType help noremap <buffer> q :q<cr>
